/* Linux driver for digital TV devices equipped with B2C2 FlexcopII(b)/III
 * register descriptions
 * see flexcop.c for copyright information
 */
/* This file is automatically generated, do not edit things here. */
#ifndef __FLEXCOP_IBI_VALUE_INCLUDED__
#define __FLEXCOP_IBI_VALUE_INCLUDED__

typedef union {
	u32 raw;

	struct {
		u32 dma_0start                     ;
		u32 dma_0No_update                 ;
		u32 dma_address0                   ;
	} dma_0x0;

	struct {
		u32 DMA_maxpackets                 ;
		u32 dma_addr_size                  ;
	} dma_0x4_remap;

	struct {
		u32 dma1timer                      ;
		u32 unused                         ;
		u32 dma_addr_size                  ;
	} dma_0x4_read;

	struct {
		u32 unused                         ;
		u32 dmatimer                       ;
		u32 dma_addr_size                  ;
	} dma_0x4_write;

	struct {
		u32 unused                         ;
		u32 dma_cur_addr                   ;
	} dma_0x8;

	struct {
		u32 dma_1start                     ;
		u32 remap_enable                   ;
		u32 dma_address1                   ;
	} dma_0xc;

	struct {
		u32 chipaddr                       ;
		u32 reserved1                      ;
		u32 baseaddr                       ;
		u32 data1_reg                      ;
		u32 working_start                  ;
		u32 twoWS_rw                       ;
		u32 total_bytes                    ;
		u32 twoWS_port_reg                 ;
		u32 no_base_addr_ack_error         ;
		u32 st_done                        ;
	} tw_sm_c_100;

	struct {
		u32 data2_reg                      ;
		u32 data3_reg                      ;
		u32 data4_reg                      ;
		u32 exlicit_stops                  ;
		u32 force_stop                     ;
		u32 unused                         ;
	} tw_sm_c_104;

	struct {
		u32 thi1                           ;
		u32 reserved1                      ;
		u32 tlo1                           ;
		u32 reserved2                      ;
	} tw_sm_c_108;

	struct {
		u32 thi1                           ;
		u32 reserved1                      ;
		u32 tlo1                           ;
		u32 reserved2                      ;
	} tw_sm_c_10c;

	struct {
		u32 thi1                           ;
		u32 reserved1                      ;
		u32 tlo1                           ;
		u32 reserved2                      ;
	} tw_sm_c_110;

	struct {
		u32 LNB_CTLHighCount_sig           ;
		u32 LNB_CTLLowCount_sig            ;
		u32 LNB_CTLPrescaler_sig           ;
	} lnb_switch_freq_200;

	struct {
		u32 ACPI1_sig                      ;
		u32 ACPI3_sig                      ;
		u32 LNB_L_H_sig                    ;
		u32 Per_reset_sig                  ;
		u32 reserved                       ;
		u32 Rev_N_sig_revision_hi          ;
		u32 Rev_N_sig_reserved1            ;
		u32 Rev_N_sig_caps                 ;
		u32 Rev_N_sig_reserved2            ;
	} misc_204;

	struct {
		u32 Stream1_filter_sig             ;
		u32 Stream2_filter_sig             ;
		u32 PCR_filter_sig                 ;
		u32 PMT_filter_sig                 ;
		u32 EMM_filter_sig                 ;
		u32 ECM_filter_sig                 ;
		u32 Null_filter_sig                ;
		u32 Mask_filter_sig                ;
		u32 WAN_Enable_sig                 ;
		u32 WAN_CA_Enable_sig              ;
		u32 CA_Enable_sig                  ;
		u32 SMC_Enable_sig                 ;
		u32 Per_CA_Enable_sig              ;
		u32 Multi2_Enable_sig              ;
		u32 MAC_filter_Mode_sig            ;
		u32 Rcv_Data_sig                   ;
		u32 DMA1_IRQ_Enable_sig            ;
		u32 DMA1_Timer_Enable_sig          ;
		u32 DMA2_IRQ_Enable_sig            ;
		u32 DMA2_Timer_Enable_sig          ;
		u32 DMA1_Size_IRQ_Enable_sig       ;
		u32 DMA2_Size_IRQ_Enable_sig       ;
		u32 Mailbox_from_V8_Enable_sig     ;
		u32 unused                         ;
	} ctrl_208;

	struct {
		u32 DMA1_IRQ_Status                ;
		u32 DMA1_Timer_Status              ;
		u32 DMA2_IRQ_Status                ;
		u32 DMA2_Timer_Status              ;
		u32 DMA1_Size_IRQ_Status           ;
		u32 DMA2_Size_IRQ_Status           ;
		u32 Mailbox_from_V8_Status_sig     ;
		u32 Data_receiver_error            ;
		u32 Continuity_error_flag          ;
		u32 LLC_SNAP_FLAG_set              ;
		u32 Transport_Error                ;
		u32 reserved                       ;
	} irq_20c;

	struct {
		u32 reset_block_000                ;
		u32 reset_block_100                ;
		u32 reset_block_200                ;
		u32 reset_block_300                ;
		u32 reset_block_400                ;
		u32 reset_block_500                ;
		u32 reset_block_600                ;
		u32 reset_block_700                ;
		u32 Block_reset_enable             ;
		u32 Special_controls               ;
	} sw_reset_210;

	struct {
		u32 vuart_oe_sig                   ;
		u32 v2WS_oe_sig                    ;
		u32 halt_V8_sig                    ;
		u32 section_pkg_enable_sig         ;
		u32 s2p_sel_sig                    ;
		u32 unused1                        ;
		u32 polarity_PS_CLK_sig            ;
		u32 polarity_PS_VALID_sig          ;
		u32 polarity_PS_SYNC_sig           ;
		u32 polarity_PS_ERR_sig            ;
		u32 unused2                        ;
	} misc_214;

	struct {
		u32 Mailbox_from_V8                ;
	} mbox_v8_to_host_218;

	struct {
		u32 sysramaccess_data              ;
		u32 sysramaccess_addr              ;
		u32 unused                         ;
		u32 sysramaccess_write             ;
		u32 sysramaccess_busmuster         ;
	} mbox_host_to_v8_21c;

	struct {
		u32 Stream1_PID                    ;
		u32 Stream1_trans                  ;
		u32 MAC_Multicast_filter           ;
		u32 debug_flag_pid_saved           ;
		u32 Stream2_PID                    ;
		u32 Stream2_trans                  ;
		u32 debug_flag_write_status00      ;
		u32 debug_fifo_problem             ;
	} pid_filter_300;

	struct {
		u32 PCR_PID                        ;
		u32 PCR_trans                      ;
		u32 debug_overrun3                 ;
		u32 debug_overrun2                 ;
		u32 PMT_PID                        ;
		u32 PMT_trans                      ;
		u32 reserved                       ;
	} pid_filter_304;

	struct {
		u32 EMM_PID                        ;
		u32 EMM_trans                      ;
		u32 EMM_filter_4                   ;
		u32 EMM_filter_6                   ;
		u32 ECM_PID                        ;
		u32 ECM_trans                      ;
		u32 reserved                       ;
	} pid_filter_308;

	struct {
		u32 Group_PID                      ;
		u32 Group_trans                    ;
		u32 unused1                        ;
		u32 Group_mask                     ;
		u32 unused2                        ;
	} pid_filter_30c_ext_ind_0_7;

	struct {
		u32 net_master_read                ;
		u32 unused                         ;
	} pid_filter_30c_ext_ind_1;

	struct {
		u32 net_master_write               ;
		u32 unused                         ;
	} pid_filter_30c_ext_ind_2;

	struct {
		u32 next_net_master_write          ;
		u32 unused                         ;
	} pid_filter_30c_ext_ind_3;

	struct {
		u32 unused1                        ;
		u32 state_write                    ;
		u32 reserved1                      ;
		u32 stack_read                     ;
		u32 reserved2                      ;
	} pid_filter_30c_ext_ind_4;

	struct {
		u32 stack_cnt                      ;
		u32 unused                         ;
	} pid_filter_30c_ext_ind_5;

	struct {
		u32 pid_fsm_save_reg0              ;
		u32 pid_fsm_save_reg1              ;
		u32 pid_fsm_save_reg2              ;
		u32 pid_fsm_save_reg3              ;
		u32 pid_fsm_save_reg4              ;
		u32 pid_fsm_save_reg300            ;
		u32 write_status1                  ;
		u32 write_status4                  ;
		u32 data_size_reg                  ;
		u32 unused                         ;
	} pid_filter_30c_ext_ind_6;

	struct {
		u32 index_reg                      ;
		u32 extra_index_reg                ;
		u32 AB_select                      ;
		u32 pass_alltables                 ;
		u32 unused                         ;
	} index_reg_310;

	struct {
		u32 PID                            ;
		u32 PID_trans                      ;
		u32 PID_enable_bit                 ;
		u32 reserved                       ;
	} pid_n_reg_314;

	struct {
		u32 A4_byte                        ;
		u32 A5_byte                        ;
		u32 A6_byte                        ;
		u32 Enable_bit                     ;
		u32 HighAB_bit                     ;
		u32 reserved                       ;
	} mac_low_reg_318;

	struct {
		u32 A1_byte                        ;
		u32 A2_byte                        ;
		u32 A3_byte                        ;
		u32 reserved                       ;
	} mac_high_reg_31c;

	struct {
		u32 reserved                       ;
		u32 data_Tag_ID                    ;
	} data_tag_400;

	struct {
		u32 Card_IDbyte6                   ;
		u32 Card_IDbyte5                   ;
		u32 Card_IDbyte4                   ;
		u32 Card_IDbyte3                   ;
	} card_id_408;

	struct {
		u32 Card_IDbyte2                   ;
		u32 Card_IDbyte1                   ;
	} card_id_40c;

	struct {
		u32 MAC1                           ;
		u32 MAC2                           ;
		u32 MAC3                           ;
		u32 MAC6                           ;
	} mac_address_418;

	struct {
		u32 MAC7                           ;
		u32 MAC8                           ;
		u32 reserved                       ;
	} mac_address_41c;

	struct {
		u32 transmitter_data_byte          ;
		u32 ReceiveDataReady               ;
		u32 ReceiveByteFrameError          ;
		u32 txbuffempty                    ;
		u32 reserved                       ;
	} ci_600;

	struct {
		u32 pi_d                           ;
		u32 pi_ha                          ;
		u32 pi_rw                          ;
		u32 pi_component_reg               ;
	} pi_604;

	struct {
		u32 serialReset                    ;
		u32 oncecycle_read                 ;
		u32 Timer_Read_req                 ;
		u32 Timer_Load_req                 ;
		u32 timer_data                     ;
		u32 unused                         ;
		u32 Timer_addr                     ;
		u32 reserved                       ;
		u32 pcmcia_a_mod_pwr_n             ;
		u32 pcmcia_b_mod_pwr_n             ;
		u32 config_Done_stat               ;
		u32 config_Init_stat               ;
		u32 config_Prog_n                  ;
		u32 config_wr_n                    ;
		u32 config_cs_n                    ;
		u32 config_cclk                    ;
		u32 pi_CiMax_IRQ_n                 ;
		u32 pi_timeout_status              ;
		u32 pi_wait_n                      ;
		u32 pi_busy_n                      ;
	} pi_608;

	struct {
		u32 PID                            ;
		u32 key_enable                     ;
		u32 key_code                       ;
		u32 key_array_col                  ;
		u32 key_array_row                  ;
		u32 dvb_en                         ;
		u32 rw_flag                        ;
		u32 reserved                       ;
	} dvb_reg_60c;

	struct {
		u32 sram_addr                      ;
		u32 sram_rw                        ;
		u32 sram_data                      ;
		u32 sc_xfer_bit                    ;
		u32 reserved1                      ;
		u32 oe_pin_reg                     ;
		u32 ce_pin_reg                     ;
		u32 reserved2                      ;
		u32 start_sram_ibi                 ;
	} sram_ctrl_reg_700;

	struct {
		u32 net_addr_read                  ;
		u32 net_addr_write                 ;
	} net_buf_reg_704;

	struct {
		u32 cai_read                       ;
		u32 reserved1                      ;
		u32 cai_write                      ;
		u32 reserved2                      ;
		u32 cai_cnt                        ;
	} cai_buf_reg_708;

	struct {
		u32 cao_read                       ;
		u32 reserved1                      ;
		u32 cap_write                      ;
		u32 reserved2                      ;
		u32 cao_cnt                        ;
	} cao_buf_reg_70c;

	struct {
		u32 media_read                     ;
		u32 reserved1                      ;
		u32 media_write                    ;
		u32 reserved2                      ;
		u32 media_cnt                      ;
	} media_buf_reg_710;

	struct {
		u32 NET_Dest                       ;
		u32 CAI_Dest                       ;
		u32 CAO_Dest                       ;
		u32 MEDIA_Dest                     ;
		u32 net_ovflow_error               ;
		u32 media_ovflow_error             ;
		u32 cai_ovflow_error               ;
		u32 cao_ovflow_error               ;
		u32 ctrl_usb_wan                   ;
		u32 ctrl_sramdma                   ;
		u32 ctrl_maximumfill               ;
		u32 reserved                       ;
	} sram_dest_reg_714;

	struct {
		u32 net_cnt                        ;
		u32 reserved1                      ;
		u32 net_addr_read                  ;
		u32 reserved2                      ;
		u32 net_addr_write                 ;
		u32 reserved3                      ;
	} net_buf_reg_718;

	struct {
		u32 wan_speed_sig                  ;
		u32 reserved1                      ;
		u32 wan_wait_state                 ;
		u32 sram_chip                      ;
		u32 sram_memmap                    ;
		u32 reserved2                      ;
		u32 wan_pkt_frame                  ;
		u32 reserved3                      ;
	} wan_ctrl_reg_71c;
} flexcop_ibi_value;

#endif
